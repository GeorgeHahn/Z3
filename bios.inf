Constant Border       = 4;
Constant ScrWidth     = 240-Border+1;
Constant ScrHeight    = 320;
Constant BufferHeight = 630;
Constant LineStride   = 30;
Constant LineStrideW  = 15;
Constant TextHeight   = 10;
Constant KeyboardStartLine		= 240;
Constant KeyboardTextSpacing	= 20;
Constant KeyboardSepSpacing		= 5;
Constant StatusHeight = 10;
Constant ScoreXOffset = (240-Border-26-28-5-5-5-1);

Constant DictionaryOff = 8;

Constant cAbbrev      = 0;
Constant cEncodO      = 2;
Constant cEncodB      = 4;
Constant cScrenX	  = 8;
Constant cScrenY	  = 10;
Constant cFontO		  = 12;
Constant cFontB		  = 14;
Constant cBitMpW	  = 16;
Constant cScroll	  = 18;
Constant cTextO		  = 20;
Constant cTextB		  = 22;
Constant cTextSep	  = 24;
Constant cScrollStart = 26;
Constant cReadCounter = 28;
Constant MaxTextSize  = $400;

Constant contextW     = $D800; ! $1B000

! Code should start at $1E580
! Font + Encoding data is directly before
! Game must be smaller than $1E000 (120Kb) to fit in BIOS

! BitMap buffer is at the top of the high RAM (18.75Kb)
! Scratch buffer is below the bitmap and is 1Kb
! Context structure is just below that
! Bottom of high RAM are the stacks growing up

[Main;
! Used as a table to pick out addresses of functions
SysInit();
SysPrint();
SysPrintChar();
SysPrintNum();
SysRead();
SysShowStatus();
SysQuit();
SysException();
];

[DecodeText
inputO inputW !inputs
outputO outputB encodingO encodingB alpha charWord c char charOut; !temps

outputO=cTextO==>contextW;
outputB=cTextB==>contextW;
encodingO=cEncodO==>contextW;
encodingB=cEncodB==>contextW;
alpha=0;
do
{
	charWord = inputO-->inputW;
	for (c=0: c<3: c++)
	{
		if (c==0) char=(charWord&$7c00)/1024;
		else if (c==1) char=(charWord&$3e0)/32;
		else char=charWord&31;

		charOut=-1;
		if (alpha<=2 && char<=5)
		{
			if (char==0)
			{
				charOut=' ';
				alpha=0;
			}
			else
			{
				if (char>=4)
					alpha=char-3;
				else
					alpha=char+2;
			}
		}
		else if (char==6 && alpha==2)
		{
			alpha=6;
		}
		else
		{
			if (alpha<=2)
			{
				charOut=encodingO->(encodingB+26*alpha+char-6);
				alpha=0;
			}
			else if (alpha<=5)
			{
				cTextB==>contextW=outputB;
				outputB=DecodeText(0, (cAbbrev==>contextW)-->(32*(alpha-3)+char));
				outputB=cTextB==>contextW;
				alpha=0;
			}
			else if (alpha==6)
			{
				alpha=32+char*32;
			}
			else
			{
				charOut=(alpha-32)|char;
				alpha=0;
			}
		}
		if (charOut>=0)
		{
			outputO=>outputB=charOut;
			outputB++;
		}
	}
	inputW++;
}
until (charWord<0);
outputO=>outputB=0;

cTextB==>contextW=outputB;
];

[TextToConsole
textO textB
fontO fontB bitmapW char ptr a b w x y checkWrap firstLine;

x=cScrenX==>contextW;
y=cScrenY==>contextW;
fontO=cFontO==>contextW;
fontB=cFontB==>contextW;
bitmapW=cBitMpW==>contextW;
char=textO=>textB;
if (x~=Border)
	checkWrap=1;
firstLine=1;
while (char)
{
	if (char<=32)
	{
		checkWrap=1;
	}
	else if (checkWrap)
	{
		w=x;
		ptr=textB;
		while (textO=>ptr>32)
		{
			w=w+(fontO->(fontB+(textO=>ptr)*TextHeight));
			ptr++;
		}
		if (w>ScrWidth)
		{
			x=ScrWidth+1;
		}
		checkWrap=0;
	}
	ptr=fontB+char*TextHeight;
	w=fontO->ptr;
	if (x+w>ScrWidth || char==10)
	{
		y=y+TextHeight;
		if (y>BufferHeight-TextHeight)
			y=0;
		if (y>(KeyboardStartLine-StatusHeight)-TextHeight || cScrollStart==>contextW)
		{
			cScrollStart==>contextW=1;
			cScroll==>contextW=cScroll==>contextW+TextHeight;
			if (cScroll==>contextW>=BufferHeight)
				cScroll==>contextW=0;
		}
		a=y*LineStride;
		b=LineStride*5;
		while (b)
		{
			a==>bitmapW=0;
			a=a+2;
			b--;
		}
		x=Border;
		firstLine=0;
	}
	if (x~=Border || char>32 || firstLine)
	{
		if (cTextSep==>contextW==0 || char==124)
		{
			a=7-(x&7);
			b=2;
			while (a)
			{
				b=b*2;
				a--;
			}
			a=x/8+y*LineStride;
			for (char=0: char<9: char++)
			{
				ptr++;
				a==>bitmapW=(a==>bitmapW)|((fontO->ptr)*b);
				a=a+LineStride;
			}
		}
		x=x+w;
	}
	textB++;
	char=textO=>textB;
}
cScrenX==>contextW=x;
cScrenY==>contextW=y;
];

[UpdateScreen
ptr size sizeW; !temps
	@write_reg 32 0;
	@write_reg 33 0;
	@blit1 0 LineStride $49c2 $49c2;
	@write_reg 32 0;
	@write_reg 33 1;
	ptr=(cBitMpW==>contextW)+(LineStrideW*BufferHeight);
	sizeW=LineStride*(StatusHeight-1);
	@blit1 ptr sizeW $49c2 $ff14;
	@write_reg 32 0;
	@write_reg 33 StatusHeight;
	ptr=(cBitMpW==>contextW)+(LineStrideW*(cScroll==>contextW));
	sizeW=LineStride*(KeyboardStartLine-StatusHeight);
	if ((cScroll==>contextW) + (KeyboardStartLine-StatusHeight) > BufferHeight)
	{
		size=BufferHeight-(cScroll==>contextW);
		sizeW=LineStride*size;
		@blit1 ptr sizeW $ff14 $49c2;
		ptr=cBitMpW==>contextW;
		size=size+StatusHeight;
		@write_reg 32 0;
		@write_reg 33 size;
		sizeW=LineStride*(KeyboardStartLine-size);
	}
	@blit1 ptr sizeW $ff14 $49c2;
];

[InitScreenRegs;
@write_reg $0000 $0000; ! Setting primes the screen for data
@write_reg $0001 $0100;
@write_reg $0002 $0700;
@write_reg $0003 $1030;
@write_reg $0008 $0302;
@write_reg $0009 $0000;
@write_reg $000A $0008;
@write_reg $0010 $0790;
@write_reg $0011 $0005;
@write_reg $0012 $0000;
@write_reg $0013 $0000;
@write_reg $0010 $12B0;
@write_reg $0011 $0007;
@write_reg $0012 $008C;
@write_reg $0013 $1700;
@write_reg $0029 $0022;
@write_reg $0030 $0000;
@write_reg $0031 $0505;
@write_reg $0032 $0205;
@write_reg $0035 $0206;
@write_reg $0036 $0408;
@write_reg $0037 $0000;
@write_reg $0038 $0504;
@write_reg $0039 $0206;
@write_reg $003C $0206;
@write_reg $003D $0408;
@write_reg $0050 $0000;
@write_reg $0051 $00EF;
@write_reg $0052 $0000;
@write_reg $0053 $013F;
@write_reg $0060 $A700;
@write_reg $0061 $0001;
@write_reg $0090 $0033;
@write_reg $0081 $0000;
@write_reg $0082 $0000;
@write_reg $0083 $013F;
];

[InitContext;
cAbbrev==>contextW=$18-->0;
cEncodO==>contextW=$FFFF; !1E500
cEncodB==>contextW=$E501;
cScrenX==>contextW=Border;
cScrenY==>contextW=0;
cFontO ==>contextW=$FFFF; ! $1E000
cFontB ==>contextW=$E001;
cBitMpW==>contextW=-(BufferHeight+StatusHeight)*LineStrideW;
cScroll==>contextW=0;
cTextO==>contextW=cBitMpW==>contextW;
cTextB==>contextW=cBitMpW==>contextW-MaxTextSize;
cTextSep==>contextW=0;
cScrollStart==>contextW=0;
];

[SysPrint
printO printW;
printW=DecodeText(printO&1, printW);
if (printO&2) ! Doing print_ret so need to add a newline
{
	printO=cTextO==>contextW;
	printW=cTextB==>contextW;
	printO=>printW=10;
	printW++;
	printO=>printW=0;
}
cTextB==>contextW=(cBitMpW==>contextW-MaxTextSize); ! reset buffer as Decode modifies it
printW=TextToConsole(cTextO==>contextW, cTextB==>contextW);
rtrue;
];

[SysPrintChar
char
textO textB;
textO=cTextO==>contextW;
textB=cTextB==>contextW;
textO=>textB=char;
textB++;
textO=>textB=0;
char=TextToConsole(textO, textB-1);
rtrue;
];

[SysPrintNum
num
digit writeStarted demon temp;
demon=10000;
if (num<0)
{
	temp=SysPrintChar('-');
	demon=-demon;
}
while (1)
{
	digit=num/demon;
	if (digit<0) ! Not sure why I need to do this but fixes -32678
		digit=-digit;
	if (digit>0 || writeStarted || demon==1 || demon==-1)
	{
		temp=SysPrintChar('0'+digit);
		writeStarted=1;
		if (demon==1 || demon==-1)
			break;
	}
	num=num-digit*demon;
	demon=demon/10;	
}
rtrue;
];

[DrawKeyboard
size ptr line i shifted;
! Use print system to make keyboard bitmaps then blit to screen
for (i=0: i<2: i++)
{
	cTextSep==>contextW=i;
	if (shifted)
	{
		@print " Q   |  W   |  E   |  R   |   T   |  Y   |  U   |   I   |  O   |  P^";
		@print "      A  |   S   |  D   |  F   |  G   |  H   |   J   |  K   |   L^";
		@print "          Z  |   X   |  C   |  V   |  B   |  N   |  M   |   ,^";
	}
	else
	{
		@print "  q  |   w  |   e   |  r   |   t   |   y  |   u   |   i   |  o   |   p^";
		@print "      a  |   s   |  d   |   f   |   g  |   h   |  j   |   k   |   l^";
		@print "          z  |   x   |  c   |   v  |   b   |  n   |  m   |   ,^";
	}
	@print "        Delete         |        Space         |         Enter^";
}
cTextSep==>contextW=0;
@write_reg 32 0;
size=LineStride*TextHeight;
ptr=cBitMpW==>contextW;
line=KeyboardStartLine+1+KeyboardSepSpacing;
for (i=0: i<4: i=i+1)
{
	@write_reg 33 line;
	@blit1 ptr size $22b0 $d75f;
	ptr=ptr+TextHeight*LineStrideW;
	line=line+KeyboardTextSpacing;
}
size=LineStride*KeyboardSepSpacing;
line=KeyboardStartLine+1;
for (i=0: i<4: i=i+1)
{
	@write_reg 33 line;
	@blit1 ptr size $22b0 $d75f;
	line=line+TextHeight+KeyboardSepSpacing-1;
	@write_reg 33 line;
	@blit1 ptr size $22b0 $d75f;
	line=line+KeyboardSepSpacing+1;
	ptr=ptr+TextHeight*LineStrideW;
}
line=KeyboardStartLine;
size=LineStride;
for (i=0: i<4: i=i+1)
{
	@write_reg 33 line;
	@blit1 ptr size $d75f $d75f;
	line=line+TextHeight+2*KeyboardSepSpacing;
}
ptr=cBitMpW==>contextW;
for (i=0: i<LineStride*TextHeight*8: i=i+2)
{
	i==>ptr=0;
}
cScrenY==>contextW=0;
];

[GameSelect
palette
imageO imageP c col count p x y winW winWMax;

y=0;
c=320;
@write_reg 32 0;
@write_reg 33 0;
while (c)
{
	p=240;
	while (p)
	{
		col=0;
		if ((c+p)&7 && (c-p)&7)
			col=((0-->(palette+c))*(0-->(palette+(p+40))))&$7E0;
		p--;
		@write_reg 34 col;
	}
	c--;
	y++;
}
palette=palette+320;

imageP=(palette+128)*2+1;
imageO=$FFFF;
p=4;
while (p)
{
	if (p&1)
	{
		winW=13;
		winWMax=112;
	}
	else
	{
		winW=127;
		winWMax=226;
	}
	if (p&2)
	{
		y=33;
	}
	else
	{
		y=167;
	}
	@write_reg $0050 winW;
	@write_reg $0051 winWMax;
	@write_reg 32 winW;
	@write_reg 33 y;
	count=100*120;
	while (count>0)
	{
		c=imageO->imageP;
		col=0-->(palette+(c&$7F));
		imageP++;
		if (c&$80)
		{
			c=imageO->imageP;
			imageP++;
			count=count-c;
			while (c)
			{
				@write_reg 34 col;
				c--;
			}
		}
		else
		{
			@write_reg 34 col;	
			count--;
		}
	}
	p--;
}
@write_reg $0050 $0000;
@write_reg $0051 $00EF;
@write_reg $0007 $0133; ! Turn on the screen
	
do !wait for touch
{
	@get_touch $93 -> x;
	if (x<1000)
		y--;
	else
		y=10;
} until (y==0);
@get_touch $95 -> x; ! x
@get_touch $1A -> y; ! y
p=0;
if (x>510)
	p++;
if (y>508)
	p=p+2;

if (p>0)
	@switch_bank p;
];

[Mandelbrot
palette x y xtemp ytemp x0 y0 x00 y00 i;
palette=contextW-MaxTextSize/2;
2==>palette=63488; 4==>palette=63488; 6==>palette=63488; 8==>palette=63488;
10==>palette=63488; 12==>palette=63488; 14==>palette=64000; 16==>palette=65280;
18==>palette=64512; 20==>palette=63744; 22==>palette=65152; 24==>palette=64384;
26==>palette=65408; 28==>palette=57216; 30==>palette=49024; 32==>palette=32640;
34==>palette=24448; 36==>palette=16256; 38==>palette=8064; 40==>palette=8068;
42==>palette=8073; 44==>palette=8078; 46==>palette=8083; 48==>palette=8089;
50==>palette=8094; 52==>palette=7327; 54==>palette=5919; 56==>palette=4639;
58==>palette=3359; 60==>palette=2079; 62==>palette=799; 64==>palette=4127;
@write_reg 32 0;
@write_reg 33 StatusHeight;
y0=60;
do
{
	x0=-120;
	y00=y0*40;
	do
	{
		xtemp=0;
		ytemp=0;
		x=0;
		y=0;
		i=0;
		x00=x0*40;
		do
		{
			xtemp=xtemp-ytemp+y00;
			y=(2*x*y+x00)/64;
			x=xtemp/64;
			xtemp=x*x;
			ytemp=y*y;
			i++;
		} until ( xtemp + ytemp >= 64*64*4 || i>=32);
		i=0==>(i+palette);
		@write_reg 34 i;
		x0++;
	} until (x0>=120);
	y0--;
} until (y0==60-(KeyboardStartLine-StatusHeight));
@write_reg $0007 $0133; ! Turn on the screen
x=GetKey();
];

[SpaceInvaders
sprites x y i k s xd u a c sx t p delay;

sprites=contextW-MaxTextSize/2;
!squid1
0==>sprites=8*(8|16);
2==>sprites=8*(4|8|16|32);
4==>sprites=8*(2|4|8|16|32|64);
6==>sprites=8*(1|2|8|16|64|128);
8==>sprites=8*(1|2|4|8|16|32|64|128);
10==>sprites=8*(4|32);
12==>sprites=8*(2|8|16|64);
14==>sprites=8*(1|4|32|128);
!ant1
16==>sprites=4*(4|256);
18==>sprites=4*(8|128);
20==>sprites=4*(4|8|16|32|64|128|256);
22==>sprites=4*(2|4|16|32|64|256|512);
24==>sprites=4*(1|2|4|8|16|32|64|128|256|512|1024);
26==>sprites=4*(1|4|8|16|32|64|128|256|1024);
28==>sprites=4*(1|4|256|1024);
30==>sprites=4*(8|16|64|128);
!bug1
32==>sprites=4*(16|32|64|128);
34==>sprites=4*(2|4|8|16|32|64|128|256|512|1024);
36==>sprites=4*(1|2|4|8|16|32|64|128|256|512|1024|2048);
38==>sprites=4*(1|2|4|32|64|512|1024|2048);
40==>sprites=4*(1|2|4|8|16|32|64|128|256|512|1024|2048);
42==>sprites=4*(4|8|16|128|256|512);
44==>sprites=4*(2|4|32|64|512|1024);
46==>sprites=4*(4|8|256|512);
!squid2
48==>sprites=8*(8|16);
50==>sprites=8*(4|8|16|32);
52==>sprites=8*(2|4|8|16|32|64);
54==>sprites=8*(1|2|8|16|64|128);
56==>sprites=8*(1|2|4|8|16|32|64|128);
58==>sprites=8*(2|8|16|64);
60==>sprites=8*(1|128);
62==>sprites=8*(2|64);
!ant2
64==>sprites=4*(4|256);
66==>sprites=4*(1|8|128|1024);
68==>sprites=4*(1|4|8|16|32|64|128|256|1024);
70==>sprites=4*(1|2|4|16|32|64|256|512|1024);
72==>sprites=4*(1|2|4|8|16|32|64|128|256|512|1024);
74==>sprites=4*(2|4|8|16|32|64|128|256|512);
76==>sprites=4*(4|256);
78==>sprites=4*(2|512);
!bug2
80==>sprites=4*(16|32|64|128);
82==>sprites=4*(2|4|8|16|32|64|128|256|512|1024);
84==>sprites=4*(1|2|4|8|16|32|64|128|256|512|1024|2048);
86==>sprites=4*(1|2|4|32|64|512|1024|2048);
88==>sprites=4*(1|2|4|8|16|32|64|128|256|512|1024|2048);
90==>sprites=4*(8|16|128|256);
92==>sprites=4*(4|8|32|64|256|512);
94==>sprites=4*(1|2|1024|2048);
!ship
96==>sprites=2*(64);
98==>sprites=2*(32|64|128);
100==>sprites=2*(32|64|128);
102==>sprites=2*(2|4|8|16|32|64|128|256|512|1024|2048);
104==>sprites=2*(1|2|4|8|16|32|64|128|256|512|1024|2048|4096);
106==>sprites=2*(1|2|4|8|16|32|64|128|256|512|1024|2048|4096);
108==>sprites=2*(1|2|4|8|16|32|64|128|256|512|1024|2048|4096);
110==>sprites=2*(1|2|4|8|16|32|64|128|256|512|1024|2048|4096);

! startX
200==>sprites=8;
202==>sprites=8;
204==>sprites=8;
206==>sprites=8;
208==>sprites=8;
! startY
210==>sprites=16;
212==>sprites=32;
214==>sprites=48;
216==>sprites=64;
218==>sprites=80;

!alive
220==>sprites=$7ff;
222==>sprites=$7ff;
224==>sprites=$7ff;
226==>sprites=$7ff;
228==>sprites=$7ff;

!bullet
234==>sprites=0;
240==>sprites=0;
246==>sprites=0;
252==>sprites=0;
258==>sprites=0;

!base
260==>sprites=$0FFF; 262==>sprites=$C000;
264==>sprites=$1FFF; 266==>sprites=$E000;
268==>sprites=$3FFF; 270==>sprites=$F000;
272==>sprites=$7FFF; 274==>sprites=$F800;
276==>sprites=$FFFF; 278==>sprites=$FC00;
280==>sprites=$FFFF; 282==>sprites=$FC00;
284==>sprites=$FFFF; 286==>sprites=$FC00;
288==>sprites=$FFFF; 290==>sprites=$FC00;
292==>sprites=$FFFF; 294==>sprites=$FC00;
296==>sprites=$FFFF; 298==>sprites=$FC00;
300==>sprites=$FFFF; 302==>sprites=$FC00;
304==>sprites=$FFFF; 306==>sprites=$FC00;
308==>sprites=$FE03; 310==>sprites=$FC00;
312==>sprites=$FC01; 314==>sprites=$FC00;
316==>sprites=$F800; 318==>sprites=$FC00;
320==>sprites=$F800; 322==>sprites=$FC00;
s=sprites+130;
for (k=0: k<3*32: k++)
{
	64==>s=0==>s;
	s++;
} 

@write_reg $0050 0;
@write_reg $0051 $EF;
@write_reg 32 0;
@write_reg 33 StatusHeight;
@blit1 0 6900 0 0;
xd=2;
sx=115;
delay=10000;
while (218==>sprites<220 && delay>100)
{
	if (random(50)==1)
	{
		x=random(11)-1;
		k=x;
		t=1;
		while (k)
		{
			t=t*2;
			k--;
		}
		x=208==>sprites+16*x;
		s=228;
		y=0;
		for (k=0: k<5: k++)
		{
			if (s==>sprites&t)
			{
				y=(s-10)==>sprites+6;
				break;
			}
			s=s-2;
		}
		if (y)
		{
			for (k=0: k<4: k++)
			{
				s=236+6*k;
				if (~~(s+4)==>sprites)
				{
					s==>sprites=x+8;
					(s+2)==>sprites=y;
					(s+4)==>sprites=1;
					break;
				}
			}
		}
	}
	
	u--;
	if (u<0)
		u=4*4;
	if (u&3==0)
	{
		t=u/4;
		x=200==>(sprites+t);
		x=x+xd;
		if (x>54 || x<8)
		{
			y=210==>(sprites+t);
			@write_reg $0050 0;
			@write_reg $0051 $EF;
			@write_reg 32 0;
			@write_reg 33 y;
			@blit1 0 240 0 0;
			210==>(sprites+t)=y+10;
			if (t==0)
				xd=-xd;
		}
		200==>(sprites+t)=x;
	}
	s=sprites+130;
	for (k=0: k<4: k++)
	{
		x=35+k*50;
		@write_reg $50 x;
		@write_reg 32 x;
		x=x+31;
		@write_reg $51 x;
		@write_reg 33 195;
		@blit1 s 64 0 $7E0;
		s=s+32;
	}
	for (k=0: k<5: k++)
	{
		x=200==>(sprites+k);
		y=210==>(sprites+k);
		a=220==>(sprites+k);
		c=y/8;
		c=(31-c)*32*64+c+1;
		s=sprites;
		if (x&2)
			s=s+24;
		if (k>=3)
			s=s+16;
		else if (k>=1)
			s=s+8;
		t=1;
		for (i=0: i<11: i++)
		{
			@write_reg $0050 x;
			@write_reg 32 x;
			@write_reg 33 y;
			x=x+15;
			@write_reg $0051 x;
			x++;
			if (a&t)
				@blit1 s 16 0 c;
			else
				@blit1 s 16 0 0;
			t=t*2;
		}
	}
	s=230;
	for (k=0: k<5: k++)
	{
		x=(s+4)==>sprites;
		if (x)
		{
			y=(s+2)==>sprites;
			y=y+x;
			(s+2)==>sprites=y;
			if (x<0)
			{
				for (i=0: i<5: i++)
				{
					t=210==>(sprites+i);
					if (y>=t && y<t+6)
					{
						t=s==>sprites-200==>(sprites+i);
						if (t>=0 && t<11*16)
						{
							p=1;
							while (t>16)
							{
								p=p*2;
								t=t-16;
							}
							if (t>2 && t<14)
							{
								if (220==>(sprites+i)&p)
								{
									220==>(sprites+i)=220==>(sprites+i)&~p;
									(s+4)==>sprites=0;
									delay=delay-180;
									break;
								}
							}
						}
					}
				}
			}
			i=s==>sprites;
			if (x>0 && i>sx+1 && i<sx+15 && y>=223 && y<228)
				(s+4)==>sprites=0;
			@write_reg 32 i;
			@write_reg 33 y;
			if (y>StatusHeight && y<KeyboardStartLine)
				@write_reg 34 $7E0;
			if (x>0)
				y=y-3*x;
			else
				y=y-x;
			@write_reg 32 i;
			@write_reg 33 y;
			if (y>StatusHeight && y<KeyboardStartLine)
				@write_reg 34 0;
			else
				(s+4)==>sprites=0;
		}
		s=s+6;
	}
	@get_touch $93 -> x;
	if (x<1000)
	{
		@get_touch $1A -> y; ! y
		if (y<720)
		{
			@get_touch $95 -> x; ! x
			if (x>512)
				sx++;
			else
				sx--;
		}
		else if (234==>sprites==0)
		{
			230==>sprites=sx+8;
			232==>sprites=220;
			234==>sprites=-4;
		}
	}
	@write_reg $0050 sx;
	@write_reg 32 sx;
	x=sx+15;
	@write_reg $0051 x;
	@write_reg 33 220;
	s=sprites+96/2;
	@blit1 s 16 0 $7E0;
	x=delay;
	do
	{
		x--;
	} until (~~x);
	@write_reg $0007 $0133; ! Turn on the screen
}
@write_reg $0050 0;
@write_reg $0051 $EF;
];

[SysInit
temp;
temp=InitContext();
temp=InitScreenRegs();
if (~~($FFFF->$E580))
	temp=GameSelect($B400);
temp=DrawKeyboard();
];

[FindInDictionary
text parse
encodingO encodingB textO textB count limit i a c;

encodingO=cEncodO==>contextW;
textO=cTextO==>contextW;
textB=cTextB==>contextW;
limit=textB+6;

i=6;
while (i)
{
	i--;
	textO=>(textB+i)=5;
}

count=parse->2;
text=text+parse->3;

while (count && textB<limit)
{
	c=text->0;
	text++;
	count--;
	if (c==32)
	{
		textO=>textB=0;
		textB++;
	}
	else
	{
		i=0;
		a=3;
		encodingB=cEncodB==>contextW;
		while (c~=encodingO->encodingB)
		{
			encodingB++;
			i++;
			if (i==26)
			{
				if (a==5)
					break;
				a++;
				i=0;
			}
		}
		if (a>3)
		{
			textO=>textB=a;
			textB++;
		}
		if (i==26)
		{
			textO=>textB=6;
			textB++;
			textO=>textB=(c/32)&$1F;
			textB++;
			textO=>textB=c&$1F;
			textB++;
		}
		else
		{
			textO=>textB=6+i;
			textB++;
		}
	}
}

textB=cTextB==>contextW;
a=textO=>(textB  )*1024+textO=>(textB+1)*32+textO=>(textB+2);
c=textO=>(textB+3)*1024+textO=>(textB+4)*32+textO=>(textB+5);
c=c|$8000;

i=DictionaryOff-->0;
parse-->0=0;
i=i+i->0+1;
limit=i->0;
i++;
count=i-->0;
i=i+2;
while (count)
{
	if (i-->0==a && i-->1==c)
	{
		parse-->0=i;
		break;
	}
	i=i+limit;
	count--;
}
];

[UpdateStatus
x y scoreX;

x=cBitMpW==>contextW+BufferHeight*LineStrideW;
y=StatusHeight*LineStrideW;
while (y)
{
	0==>x=0;
	x++;
	y--;
}

x=cScrenX==>contextW;
y=cScrenY==>contextW;
cScrenX==>contextW=Border;
cScrenY==>contextW=BufferHeight;
@print_obj sys__glob0;
scoreX=ScoreXOffset;
if (sys__glob1>=1000)
	scoreX=scoreX-15;
else if (sys__glob1>=100)
	scoreX=scoreX-10;
else if (sys__glob1>=10)
	scoreX=scoreX-5;
if (sys__glob2>=1000)
	scoreX=scoreX-15;
else if (sys__glob2>=100)
	scoreX=scoreX-10;
else if (sys__glob2>=10)
	scoreX=scoreX-5;
cScrenX==>contextW=scoreX;
print "Score:";
@print_num sys__glob1;
print " Moves:";
@print_num sys__glob2;
cScrenX==>contextW=x;
cScrenY==>contextW=y;
];

[GetKey
x y
startY scrollStart scrollLimit scroll temp;

startY=1024;
scrollLimit=cScroll==>contextW;
while (1)
{
	scrollStart=scroll;
	do !wait for not-touch
	{
		if (startY~=1024)
		{
			@get_touch $1A -> y; ! y
			scroll=scrollStart+(startY-y)/3;
			if (scroll>0)
			{
				scroll=0;
			}
			else if (scroll<-BufferHeight+KeyboardStartLine-StatusHeight)
			{
				scroll=-BufferHeight+KeyboardStartLine-StatusHeight;
			}
			cScroll==>contextW=((scrollLimit+scroll+BufferHeight+BufferHeight)%BufferHeight);
			temp=UpdateScreen();
		}
		@get_touch $93 -> x;
	} until (x>=1000);
	y=10;
	do !wait for touch
	{
		@get_touch $93 -> x;
		if (x<1000)
			y--;
		else
			y=10;
	} until (y==0);
	startY=1024;
	@get_touch $95 -> x; ! x
	@get_touch $1A -> y; ! y
	if (y>=870)
	{
		if (x<=365)	! delete
			return 0;
		if (x<=650)
			return ' ';
		return 10;
	}
	else if (y>=820)
		{
			if (x<=250)
				return 'z';
			if (x<=330)
				return 'x';
			if (x<=420)
				return 'c';
			if (x<=500)
				return 'v';
			if (x<=590)
				return 'b';
			if (x<=680)
				return 'n';
			if (x<=765)
				return 'm';
			return ',';
		}
	else if (y>=770)
	{
		if (x<=205)
			return 'a';
		if (x<=300)
			return 's';
		if (x<=370)
			return 'd';
		if (x<=460)
			return 'f';
		if (x<=540)
			return 'g';
		if (x<=635)
			return 'h';
		if (x<=715)
			return 'j';
		if (x<=805)
			return 'k';
		return 'l';
	}
	else if (y>=720)
	{
		if (x<=170)
			return 'q';
		if (x<=250)
			return 'w';
		if (x<=340)
			return 'e';
		if (x<=420)
			return 'r';
		if (x<=500)
			return 't';
		if (x<=590)
			return 'y';
		if (x<=680)
			return 'u';
		if (x<=765)
			return 'i';
		if (x<=840)
			return 'o';
		return 'p';
	}
	else
	{
		startY=y;
	}
}
];

[EraseConsole
sx sy
i ptr endptr bitmapW mask;

bitmapW=cBitMpW==>contextW;

i=sx;
mask=1;
while (sx&15)
{
	mask=mask*2;
	sx++;
}
mask=~(mask-1);
sx=i/16;

while (sy<=cScrenY==>contextW)
{
	for (i=0: i<10: i++)
	{
		ptr=(sy+i)*LineStride+sx+sx;
		endptr=(sy+i+1)*LineStride;
		ptr==>bitmapW=ptr==>bitmapW&mask;
		ptr=ptr+2;
		while (ptr<endptr)
		{
			ptr==>bitmapW=0;
			ptr=ptr+2;
		}
	}
	sx=0;
	sy=sy+10;
	mask=0;
}
];

[SysRead
parse text
count i c sep dict readingWord parse0 temp;

temp=UpdateStatus();
temp=UpdateScreen();
@write_reg $0007 $0133; ! Turn on the screen

c=cScrenX==>contextW;
sep=cScrenY==>contextW;
dict=cScroll==>contextW;

i=0;
do
{
	i++;
	text->i=GetKey();
	if (text->i==0 && i>=2)
	{
		i=i-2;
	}
	temp=EraseConsole(c,sep);
	cScrenX==>contextW=c;
	cScrenY==>contextW=sep;
	cScroll==>contextW=dict;
	text->(i+1)=0;
	temp=TextToConsole(1, text);
	temp=UpdateScreen();
} until (i && text->i==10);
text->i=0;
text->0=(i-1);

if (text->0==6)
{
	if (text->1=='b' && text->2=='a' && text->3=='n' && text->4=='k' && text->5==' ')
	{
		c=text->6-'a';
		@switch_bank c;
	}
}
if (text->0==10)
{
	if (text->1=='m' && text->2=='a' && text->3=='n' && text->4=='d' && text->5=='e'
	 && text->6=='l' && text->7=='b' && text->8=='r' && text->9=='o' && text->10=='t')
	{
		parse0=Mandelbrot();
	}
}
if (text->0==12)
{
	if (text->1=='i' && text->2=='n' && text->3=='v' && text->4=='a' && text->5=='d'
	 && text->6=='e' && text->7==' ' && text->8=='s' && text->9=='p' && text->10=='a'
     && text->11=='c' && text->12=='e')
	{
		parse0=SpaceInvaders();
	}
}

parse0=parse;
parse++;
parse++;

parse0->1=0;
count=text->0;
i=1;
while (count)
{
	c=text->i;
	if (c==32)
	{
		sep=-1;
	}
	else
	{
		dict=DictionaryOff-->0;
		sep=dict->0;
		while (sep)
		{
			if (c==dict->sep)
				break;
			sep--;
		}
	}
	if (readingWord)
	{
		if (sep)
		{
			parse0->1=parse0->1+1;
			parse->2=i-parse->3;
			temp=FindInDictionary(text, parse);
			parse=parse+4;
			readingWord=0;
			if (sep>0)
			{
				parse->3=i;
				readingWord=1;
			}
		}
	}
	else if (sep>=0)
	{
		parse->3=i;
		readingWord=1;
	}
	count--;
	i++;
}
if (readingWord)
{
	parse0->1=parse0->1+1;
	parse->2=i-parse->3;
	temp=FindInDictionary(text, parse);
}
];

[SysShowStatus
temp;
temp=UpdateStatus();
temp=UpdateScreen();
];

[SysQuit
temp;
@print "^[Quit. Press any key to reboot]";
temp=UpdateScreen();
temp=GetKey();
@switch_bank 0;
];

[SysException
pc oper0 oper1;
@print "[Exception PC/2=";
@print_num pc;
@print " OP0=";
@print_num oper0;
@print " OP1=";
@print_num oper1;
@print "]^[Press any key to reboot]";
pc=GetKey();
@switch_bank 0;
];
