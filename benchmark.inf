[Ackermann
m n;
if (m==0)
	return n+1;
else if (n==0)
	return Ackermann(m-1,1);
else
	return Ackermann(m-1,Ackermann(m,n-1));
];

[AckermannBench
result i;
	@print "Ackermann Benchmark^";
	@print "Start^";
	@show_status;
	result=Ackermann(3,6);
	@print "End^";
	@show_status;
	@print "Result=";
	@print_num result;
	@new_line;
	@print "Start10^";
	@show_status;
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	result=Ackermann(3,6);
	@print "End^^";
	@show_status;
];

Constant SIZE=8192;

Array flags -> SIZE+1;

[Sieve
iter count i prime k;
	@print "Sieve of Eratosthenes Benchmark^";
	@print "Start10^";
	@show_status;
	for (iter = 1: iter <= 10: iter++) 
    {
      count = 0;
      for (i = 0: i <= SIZE: i++)
        i->flags = 1;

      for (i = 0: i <= SIZE: i++) 
        {
          if (i->flags) 
            {
              prime = i + i + 3;
              k = i + prime;

              while (k <= SIZE)
                {
                  k->flags = 0;
                  k = k + prime;
                }

              count++;
            }
        }
    }
	@print "End^";
	@show_status;
	@print "Count=";
	@print_num count;
	@new_line;
	@print "Start100^";
	@show_status;
	for (iter = 1: iter <= 100: iter++) 
    {
      count = 0;
      for (i = 0: i <= SIZE: i++)
        i->flags = 1;

      for (i = 0: i <= SIZE: i++) 
        {
          if (i->flags) 
            {
              prime = i + i + 3;
              k = i + prime;

              while (k <= SIZE)
                {
                  k->flags = 0;
                  k = k + prime;
                }

              count++;
            }
        }
    }
	@print "End^^";
	@show_status;
];

[Mandelbrot
x y xtemp ytemp x0 y0 x00 y00 i;
@print "Start Mandelbrot 16-bit^";
@show_status;
y0=60;
do
{
	x0=-120;
	y00=y0*40;
	do
	{
		xtemp=0;
		ytemp=0;
		x=0;
		y=0;
		i=0;
		x00=x0*20;
		do
		{
			xtemp=xtemp-ytemp+y00;
			y=(x*y+x00)/32;
			if (y>=2*64 || y<=-2*64)
			{
				i++;
				break;
			}
			x=xtemp/64;
			if (x>=2*64 || x<=-2*64)
			{
				i++;
				break;
			}
			xtemp=x*x;
			ytemp=y*y;
			i++;
		} until ( xtemp + ytemp >= 64*64*4 || i>=32);
		i=1-->(i+MandelbrotPalette);
		x0++;
	} until (x0>=120);
	y0--;
} until (y0==60-230);
@print "End Mandelbrot 16-bit^^";
@show_status;
];

[ Mul32
r a b
x1 x2 y1 y2 mul;
mul=1;
a=(a-->0)*16+(a->2)/16;
if (a<0)
{
	mul=-mul;
	a=-a;
}
y1=a/256;
x1=a&$ff;
b=(b-->0)*16+(b->2)/16;
if (b<0)
{
	mul=-mul;
	b=-b;
}
y2=b/256;
x2=b&$ff;
r-->0=0;
r-->1=x1*x2;
r++;
r-->0=r-->0+x1*y2+x2*y1;
r--;
r-->0=mul*(r-->0+y1*y2);
];

[ Add32
r a b;
r-->0=0;
r-->1=(a-->1)&$ff+(b-->1)&$ff;
r++;
a++;
b++;
r-->0=r-->0+(a-->0)&$ff+(b-->0)&$ff;
r--;
a--;
b--;
r-->0=r-->0+a-->0+b-->0;
];

[ Neg32
r a;
r-->1=~a-->1+1;
r-->0=~a-->0;
if (r-->1==0)
	r-->0=r-->0+1;
];

[ Mov32
r a;
r-->1=a-->1;
r-->0=a-->0;
];

[ Dob32
r;
r-->0=2*r-->0;
if (r-->1<0)
	r-->0=r-->0+1;
r-->1=2*r-->1;
];

[MandelbrotPalette;
];

[Mandelbrot32
x y xtemp ytemp x0 y0 x00 y00 i t;
@print "Start Mandelbrot 32-bit^";
@show_status;
y0=60;

xtemp=0;
ytemp=4;
y=8;
x=12;
t=16;
x00=20;
y00=24;

do
{
	x0=-120;
	y00-->0=y0*40/16;
	y00-->1=0;
	do
	{
		xtemp-->0=0;
		xtemp-->1=0;
		ytemp-->0=0;
		ytemp-->1=0;
		y-->0=0;
		y-->1=0;
		x-->0=0;
		x-->1=0;
		x00-->0=x0*40/16;
		x00-->1=0;
		
		i=0;
		do
		{
			Neg32(ytemp, ytemp);
			Add32(t, xtemp, ytemp);
			Neg32(ytemp, ytemp);
			Add32(xtemp, t, y00);
			Mul32(t, x, y);
			Dob32(t);
			Add32(y, t, x00);
			Mov32(x,xtemp);
			Mul32(xtemp,x,x);
			Mul32(ytemp,y,y);
			i++;
			if (y-->0>=$200 || y-->0<=-$200)
				break;
			if (x-->0>=$200 || x-->0<=-$200)
				break;
			Add32(t,xtemp,ytemp);
		} until ( t-->0 >= $400 || i>=32);
		i=1-->(i+MandelbrotPalette);
		x0++;
	} until (x0>=120);
	y0--;
} until (y0==60-230);
@print "End Mandelbrot 32-bit^^";
@show_status;
];

[Main
t;
	AckermannBench();
	Sieve();
	Mandelbrot();
	Mandelbrot32();
];
